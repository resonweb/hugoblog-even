---
layout: "post"
title: "Manjaro之路"
author: "ResonHou"
categories: ["Computer"]
tags: ["Linux","Manjaro"]
date: 2019-01-25
---

最终，还是选择了向现实屈服，Manjaro做桌面版，~~还缺少软件的支持~~(打脸:wave::facepunch:)，pacman包管理工具我还是用不习惯。我只是一个普通用户，最终还是选择Linux Mint吧。

<!--more-->

最近可能是我自己的内心又浪起来了。加上我的笔记本在经过了如此长时间的催残，Windows使得它已经不能流畅地工作了，所以我现在决定，开始用[Manjaro](https://manjaro.org/)([目前非常流行的Linux发行版](https://distrowatch.com/dwres.php?resource=popularity))。如下记录了自我升(zhe)华(mo)的历程。  

**Manjaro** 是基于ArchLinux的发行版，优点上包管理工具继承了ArchLinux的滚动更新机制。界面优化还算可以，有多种图形界面可以选择。这里我选择Manjaro-Xfce版，因为Xfce4在保有相对优秀的图形界面的同时，点用更少的系统资源，也就里所谓的轻桌面。

如果你的机子好一些，或是从Gnome过来的，可以选择相对更漂亮的gnome桌面版。  
当然这里还是要安利一下我们国家深之度公司开发的Deepin桌面版，其桌面的漂亮程度已经影响到了海外市场。当然你也可以[点击这里](https://distrowatch.com/dwres.php?resource=popularity)来查看其实时的流行程度。
## Download
下载地址：[https://manjaro.org/download](https://manjaro.org/download/)  
- 请尽可能下载最新的安装包（**这是一个忠告**）  
- 正是由于Manjaro比ArchLinux提供了更友好的安装过程（傻瓜式安装），所以我才选择了它（虽然ArchLinux的最小化安装更精练）。这里不再说明它的安装过程，你可以在任何一个搜索引擎（不要再依赖百度了）中找到一大堆你想要的资料。
## After Installation
Manjaro是一个开箱可用的发行版，所以安装好了已经，并不需要太多的配置，就可以正常使用。但是吧，Linux既然有如此优秀的可塑性，那我们还是有必要做一些简单的优化的。

### Upgraded
由于ArchLinux是使用的滚动更新包管理机制，原则上说你可以从任意一个起点来更新。但是这中间总是会有包依赖关系的错误，所以选择最新的起点是一个明智的决定。
```bash
sudo vi /etc/pacman.d/mirrorlist
sudo pacman -Syu	# If something goes wrong, like "error: failed to commit transaction (conflicting fils)"
			# Then use the following commands
sudo pacman -Qo *** 	# Where * is the error file's absolutly path
sudo pacman -Rc		# Do this, But remind you must know what you are doing.
sudo pacman -Syu    	# Then upgrade you system
```
### Install zsh
Bash shell 作为最默认的基本工具，其安全稳定性毋庸置疑。但是少了点个性化，所以用zsh来满足自己的审美。  
然后oh-my-zsh作为其模板库，用来使用别人写好的主题模板。
```bash
sudo pacman -S vim git zsh
sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
vim .zshrc                  # 修改主题
sudo vim /etc/passwd        # 修改默认的Shell
```
### Install fcitx (小企鹅输入法)
**请先用图形界面安装中文语言包**
```bash
sudo pacman -S fcitx-im             # 输入法框架
sudo pacman -S fcitx-table-extra    # 输入法
sudo pacman -S fcitx-configtools    # 图形管理工具
vim ~/.profile
```
在打开的文件中加入如下两行文字后保存退出。登出重新登入就可以在通知栏看到小键盘符号了，右击可以设置。
> export QT_IM_MODULE="fcitx"  
> export XMODIFIERS="@im=fcitx"

## 生产工具安装
### Install TexStudio
详见：[**点这里，点这里**](https://techknight.eu/2015/09/30/setup-latex-environment-linux-manjaro-pacman/)
```bash
sudo pacman -S texlive-most		# 安装TexLive的常用包
sudo pacman -S texlive-lang		# 非英语支持
sudo pacman -S texstudio		# 安装Tex编辑器（IDE）
```

### Install root(cern)
由于官网给出的平台不包含Manjaro，所以照着Fedora的依赖包安装。库名可能不一样，我用的是zsh，会自动补全，用相近的包名安装了依赖包。
[点这里](https://root.cern.ch/build-prerequisites#opensuse)查看依赖包。
```bash
mkdir ~/programs/root		# root不建议安装在源码的目录里，而是建议新建一个用于安装root的新目录
cd ~/programs/root
cmake ~/root-xxxx		# 假设你解压源码到了root-xxxx目录
cmake --build . -- -j8 		# 注意空格，j后面的数字为CPU核数
				# Have a big cup of coffee, please!
source ~/programs/root/bin/thisroot.sh
```

### Install MG5
MadGraph5_aMC的具体细节请移步到[MadGraph 教程]({{ site.baseurl }}/{% post_url 2018-05-05-MadGraph5_aMC %})

下载解压后，用MG5(2.6.4)自带的脚本安装LHAPDF6出问题，所以自己手动解决安装。  
- 去LHAPDF的[官网下载](https://lhapdf.hepforge.org/install.html)  
- 解压后，用标准的configure-make来安装   
- 最后记得在.zshrc中添加环境变量，PATH, PYTHONPATH, LD_LIBRARY_PATH
- 修改 `MG5/input/mg5_configuration.txt` , （可以不修改，已经在环境变量里了）

### Install Delphes
由于在Manjaro系统中关于rpc库的文件换了路径（/usr/include/tirpc/rpc），所以会导致Delphes编译出错。解决方法是在Delphes的Makefile中修改两行，加入库的索引。参看：[https://cp3.irmp.ucl.ac.be/projects/delphes/ticket/374](https://cp3.irmp.ucl.ac.be/projects/delphes/ticket/374)

具体操作为先运行 `./configure`，然后修改Makefile中的下面两行：  
> CXXFLAGS += *** -I/usr/include/tirpc		# 中间的星号代表原有的东西不变，空一格加上tirpc的路径  
> DELPHES_LIBS = *** -Itirpc     

最后再运行 `make -j4`

### Install CheckMATE
由于Manjaro系统默认使用python3，而CheckMATE使用的是python2，所以得修改默认的python版本。方法是在用户家目录下建一个`bin`目录，并把它加到系统变量$PATH的前面。之后用下面两条命令在这个bin目录下建立两个快捷方式。
```bash
ln -s /usr/bin/python2.7 $HOME/bin/python
ln -s /usr/bin/python2.7-config $HOME/bin/python-config
sudo pacman -S python2-pip
```
最后，在解压过的CheckMATE目录中，使用`./configure`, `make -j4`就可以编译了。

先这样，拜了个拜！
